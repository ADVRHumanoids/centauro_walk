solver:
  type: ilqr
  ipopt.linear_solver: ma57
  ipopt.tol: 0.1
  ilqr.tol: 0.01
  ipopt.constr_viol_tol: 0.01
  ilqr.constr_viol_tol: 0.01
#  ipopt.hessian_approximation: exact
  ipopt.print_level: 5
  ipopt.suppress_all_output: 'no'
  ipopt.sb: 'yes'
  ilqr.suppress_all_output: 'yes'
  ilqr.codegen_enabled: true
  ilqr.codegen_workdir: /tmp/tyhio
  ilqr.enable_gn: true
  ilqr.hxx_reg_base: 0.0
  ilqr.n_threads: 0
  print_time: 0

constraints:
  - contact_1_contact
  - contact_2_contact
  - contact_3_contact
  - contact_4_contact
  - final_base_xy
  - base_orientation

costs:
#  - com_height
  - joint_regularization
  - joint_posture

.define:
    - &w_com 0.05
    - &w_base_ori 0.5
    - &w_base_xy 10.
    - &w_ball_xy 10.
    - &w_ball_z 1.
    - &w_ball_ori 20.
    - &w_postural_roll 1.
    - &w_postural 0.1
    - &w_ankle_postural 0.05
#    - &w_wheel_inclination 100.
    - &wheel_radius 0.124

final_base_xy:
  type: Cartesian
  distal_link: pelvis
  indices: [0, 1]
  nodes: ${[N]}
#  nodes: all
  weight: *w_base_xy

com_height:
  type: Cartesian
  distal_link: base_link
  indices: [2]
  nodes: all
  weight: *w_com

base_orientation:
  type: Cartesian
  distal_link: pelvis
  indices: [3, 4, 5]
  nodes: ${[N]}
  weight: *w_base_ori

# ===============================

rolling_contact_1:
  type: Rolling
  frame: wheel_1
  radius: *wheel_radius

rolling_contact_2:
  type: Rolling
  frame: wheel_2
  radius: *wheel_radius

rolling_contact_3:
  type: Rolling
  frame: wheel_3
  radius: *wheel_radius

rolling_contact_4:
  type: Rolling
  frame: wheel_4
  radius: *wheel_radius

# ==================================

interaction_contact_1:
  type: VertexForce
  frame: contact_1
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - contact_1

interaction_contact_2:
  type: VertexForce
  frame: contact_2
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - contact_2

interaction_contact_3:
  type: VertexForce
  frame: contact_3
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - contact_3

interaction_contact_4:
  type: VertexForce
  frame: contact_4
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - contact_4

contact_1_contact:
  type: Contact
  subtask: [interaction_contact_1, rolling_contact_1]

contact_2_contact:
  type: Contact
  subtask: [interaction_contact_2, rolling_contact_2]

contact_3_contact:
  type: Contact
  subtask: [interaction_contact_3, rolling_contact_3]

contact_4_contact:
  type: Contact
  subtask: [interaction_contact_4, rolling_contact_4]

joint_posture_ankles:
  type: Postural
  weight: *w_ankle_postural
  indices: [4, 10, 16, 22]
  nodes: all

joint_posture:
  type: Postural
  weight: *w_postural
  indices: [ 0, 1, 2, 3, # 4, #5, no postural on ankle yaw, no wheel
             6, 7, 8, 9, # 10, #11,
             12, 13, 14, 15, # 16, #17
             18, 19, 20, 21, # 22, #23
             24, # torso yaw
             25, 26, 27, 28, 29, 30, # left arm
             31, 32, 33, 34, 35, 36, # right arm
             37, 38 #head joints
  ]
  nodes: all

# todo: wrong, as the order COUNTS. If I add the contacts after the joint regularization, they wont get considered.
joint_regularization:
  type: Regularization
  nodes: all
  weight:
#    velocity: 1e-1
    acceleration: 1e-3 # 0.01
    force: 1e-4 # todo <----- how to do? if there are more forces...

z_ball_1:
  type: Cartesian
  distal_link: contact_1
  indices: [2]
  cartesian_type: position
  weight: *w_ball_z

z_ball_2:
  type: Cartesian
  distal_link: contact_2
  indices: [2]
  cartesian_type: position
  weight: *w_ball_z

z_ball_3:
  type: Cartesian
  distal_link: contact_3
  indices: [2]
  cartesian_type: position
  weight: *w_ball_z

z_ball_4:
  type: Cartesian
  distal_link: contact_4
  indices: [2]
  cartesian_type: position
  weight: *w_ball_z

#inclination_wheel_1:
#  type: Cartesian
#  distal_link: wheel_1
#  indices: [3, 4, 5]
#  weight: *w_wheel_inclination
#
#inclination_wheel_2:
#  type: Cartesian
#  distal_link: wheel_2
#  indices: [3, 4, 5]
#  weight: *w_wheel_inclination
#
#inclination_wheel_3:
#  type: Cartesian
#  distal_link: wheel_3
#  indices: [3, 4, 5]
#  weight: *w_wheel_inclination
#
#inclination_wheel_4:
#  type: Cartesian
#  distal_link: wheel_4
#  indices: [3, 4, 5]
#  weight: *w_wheel_inclination