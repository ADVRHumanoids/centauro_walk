solver:
  type: ilqr
  ipopt.linear_solver: ma57
  ipopt.tol: 0.1
#  ilqr.merit_der_threshold: 1e-3
#  ilqr.defect_norm_threshold: 1e-3
  ipopt.constr_viol_tol: 0.01
  ilqr.constraint_violation_threshold: 1e-2
#  ipopt.hessian_approximation: exact
  ipopt.print_level: 5
  ipopt.suppress_all_output: 'yes'
  ipopt.sb: 'yes'
  ilqr.suppress_all_output: 'yes'
  ilqr.codegen_enabled: true
  ilqr.codegen_workdir: /tmp/tyhio
  ilqr.enable_gn: true
  ilqr.hxx_reg_base: 0.0
  ilqr.n_threads: 0
  print_time: 0

constraints:
  - contact_1
  - contact_2
  - contact_3
  - contact_4

costs:
  - z_contact_1
  - z_contact_2
  - z_contact_3
  - z_contact_4
  - base_xy
  - base_z
  - base_orientation
  - joint_regularization
  - joint_posture
  - zmp
#  - joint_posture_ub

.define:
    - &w_com 5.
    - &w_base_ori 10.
    - &w_base_xy 5.
    - &w_contact_z 50.
    - &w_postural 0.5
    - &w_postural_ub 1.
    - &w_v 1.
    - &w_a 1e-2
    - &w_f 1e-3
    - &w_zmp 100.
    - &w_ball_ori 20.
    - &w_ball_xy 10.
    - &w_postural_roll 1.

base_xy:
  type: Cartesian
  distal_link: base_link
  indices: [0, 1]
  nodes: ${range(N-10, N)}
#  nodes: all
  weight: *w_base_xy

base_z:
  type: Cartesian
  distal_link: base_link
  indices: [2]
  nodes: all
  weight: *w_com

base_orientation:
  type: Cartesian
  distal_link: base_link
  indices: [3, 4, 5]
  nodes: ${range(N-5, N)}
  cartesian_type: position
  weight: *w_base_ori

# ===============================

zero_velocity_1:
  type: Cartesian
  distal_link: contact_1
  indices: [0, 1, 2]
  cartesian_type: velocity

zero_velocity_2:
  type: Cartesian
  distal_link: contact_2
  indices: [0, 1, 2]
  cartesian_type: velocity

zero_velocity_3:
  type: Cartesian
  distal_link: contact_3
  indices: [0, 1, 2]
  cartesian_type: velocity

zero_velocity_4:
  type: Cartesian
  distal_link: contact_4
  indices: [0, 1, 2]
  cartesian_type: velocity

# ==================================

interaction_1:
  type: VertexForce
  frame: contact_1
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - contact_1

interaction_2:
  type: VertexForce
  frame: contact_2
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - contact_2

interaction_3:
  type: VertexForce
  frame: contact_3
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - contact_3

interaction_4:
  type: VertexForce
  frame: contact_4
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - contact_4

contact_1:
  type: Contact
  subtask: [interaction_1, zero_velocity_1]

contact_2:
  type: Contact
  subtask: [interaction_2, zero_velocity_2]

contact_3:
  type: Contact
  subtask: [interaction_3, zero_velocity_3]

contact_4:
  type: Contact
  subtask: [interaction_4, zero_velocity_4]

joint_posture:
  type: Postural
  weight: *w_postural
  indices: [0, 1, 2, 3,
            4, 5, 6, 7,
            8, 9, 10, 11,
            12, 13, 14, 15]
  nodes: all

joint_posture_ub:
  type: Postural
  weight: *w_postural_ub
  indices:  [16,
             17, 18, 19, 20, 21, 22,
             23, 24, 25, 26, 27, 28,
             29, 30
             ]
  nodes: all

zmp:
  type: Zmp
  weight: *w_zmp

# todo: wrong, as the order COUNTS. If I add the contacts after the joint regularization, they wont get considered.
joint_regularization:
  type: Regularization
  nodes: all
  weight:
#    velocity: *w_v
    acceleration: *w_a # 0.01
    force: *w_f # todo <----- how to do? if there are more forces...

z_contact_1:
  type: Cartesian
  distal_link: contact_1
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z

z_contact_2:
  type: Cartesian
  distal_link: contact_2
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z

z_contact_3:
  type: Cartesian
  distal_link: contact_3
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z

z_contact_4:
  type: Cartesian
  distal_link: contact_4
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z


