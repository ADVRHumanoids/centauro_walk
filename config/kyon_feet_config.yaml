solver:
  type: ilqr
  ipopt.linear_solver: ma57
  ipopt.tol: 0.1
  ipopt.constr_viol_tol: 0.01
#  ipopt.hessian_approximation: exact
  ipopt.print_level: 5
  ipopt.suppress_all_output: 'yes'
  ipopt.sb: 'yes'
#  ilqr.merit_der_threshold: 1e-3
#  ilqr.defect_norm_threshold: 1e-3
  ilqr.constraint_violation_threshold: 1e-2
  ilqr.suppress_all_output: 'yes'
  ilqr.codegen_enabled: true
  ilqr.codegen_workdir: /tmp/tyhio
  ilqr.enable_gn: true
  ilqr.hxx_reg_base: 0.0
  ilqr.n_threads: 0
  print_time: 0

constraints:
  - ball_1_contact
  - ball_2_contact
  - ball_3_contact
  - ball_4_contact

costs:
  - z_ball_1
  - z_ball_2
  - z_ball_3
  - z_ball_4
  - final_base_xy
  - base_orientation
  - com_height
  - joint_regularization
  - joint_posture
#  - joint_posture_ub

.define:
    - &w_com 50.
    - &w_base_ori 10.
    - &w_base_xy 10.
    - &w_ball_z 100.
    - &w_postural 5.
    - &w_postural_ub 10.
    - &w_v 1e-2
    - &w_a 5e-2
    - &w_f 1e-2
    - &w_ball_ori 20.
    - &w_ball_xy 10.
    - &w_postural_roll 1.

final_base_xy:
  type: Cartesian
  distal_link: base_link
  indices: [0, 1]
  nodes: ${range(N-5, N)}
#  nodes: all
#  cartesian_type: velocity
  weight: *w_base_xy

com_height:
  type: Cartesian
  distal_link: base_link
  indices: [2]
  nodes: all
  weight: *w_com

base_orientation:
  type: Cartesian
  distal_link: base_link
  indices: [3, 4, 5]
  nodes: ${range(N-8, N)}
#  nodes: all
#  cartesian_type: velocity
  weight: *w_base_ori

# ===============================

zero_velocity_ball_1:
  type: Cartesian
  distal_link: ball_1
  indices: [0, 1, 2]
  cartesian_type: velocity

zero_velocity_ball_2:
  type: Cartesian
  distal_link: ball_2
  indices: [0, 1, 2]
  cartesian_type: velocity

zero_velocity_ball_3:
  type: Cartesian
  distal_link: ball_3
  indices: [0, 1, 2]
  cartesian_type: velocity

zero_velocity_ball_4:
  type: Cartesian
  distal_link: ball_4
  indices: [0, 1, 2]
  cartesian_type: velocity

# ==================================

interaction_ball_1:
  type: VertexForce
  frame: ball_1
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - ball_1

interaction_ball_2:
  type: VertexForce
  frame: ball_2
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - ball_2

interaction_ball_3:
  type: VertexForce
  frame: ball_3
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - ball_3

interaction_ball_4:
  type: VertexForce
  frame: ball_4
  fn_min: 10.0
  enable_fc: true
  friction_coeff: 0.5
  vertex_frames:
    - ball_4

ball_1_contact:
  type: Contact
  subtask: [interaction_ball_1, zero_velocity_ball_1]

ball_2_contact:
  type: Contact
  subtask: [interaction_ball_2, zero_velocity_ball_2]

ball_3_contact:
  type: Contact
  subtask: [interaction_ball_3, zero_velocity_ball_3]

ball_4_contact:
  type: Contact
  subtask: [interaction_ball_4, zero_velocity_ball_4]

joint_posture:
  type: Postural
  weight: *w_postural
  indices: [0, 1, 2,
            3, 4, 5,
            6, 7, 8,
            9, 10, 11]
  nodes: all

joint_posture_ub:
  type: Postural
  weight: *w_postural_ub
  indices:  [12, 13, 14, 15, 16,
             17, 18, 19, 20, 21]
  nodes: all
# todo: wrong, as the order COUNTS. If I add the contacts after the joint regularization, they wont get considered.
joint_regularization:
  type: Regularization
  nodes: all
  weight:
    velocity: *w_v
    acceleration: *w_a # 0.01
    force: *w_f # todo <----- how to do? if there are more forces...

z_ball_1:
  type: Cartesian
  distal_link: ball_1
  indices: [2]
  cartesian_type: position
  weight: *w_ball_z

z_ball_2:
  type: Cartesian
  distal_link: ball_2
  indices: [2]
  cartesian_type: position
  weight: *w_ball_z

z_ball_3:
  type: Cartesian
  distal_link: ball_3
  indices: [2]
  cartesian_type: position
  weight: *w_ball_z

z_ball_4:
  type: Cartesian
  distal_link: ball_4
  indices: [2]
  cartesian_type: position
  weight: *w_ball_z

