solver:
  type: ilqr
  ipopt.linear_solver: ma57
  ilqr.constr_viol_tol: 1e-9
  ipopt.tol: 1e-9
  ipopt.constr_viol_tol: 1e-9
#  ipopt.hessian_approximation: exact
  ilqr.verbose: false
  ilqr.codegen_enabled: true
  ilqr.codegen_workdir: /tmp/miao
  ilqr.enable_gn: true
  ipopt.print_level: 5
  ipopt.suppress_all_output: 'yes'
  ipopt.sb: 'yes'
  print_time: 0

constraints:

  - foot_contact_l_sole
  - foot_contact_r_sole

costs:
  - final_base_x
  - final_base_y
  - com_height
  - joint_posture_legs
  - joint_posture_upper_body
  - base_orientation
  - rot_l_sole
  - rot_r_sole
  - foot_z_l_sole
  - foot_z_r_sole
#  - joint_regularization #, foot_z_l_sole, foot_z_r_sole] # com_height

.define:
    - &w_com 20.
    - &w_base_ori 10.
    - &w_base_x 10.
    - &w_base_y 10.
    - &w_contact_z 50.
    - &w_postural 1.
    - &w_postural_ub 1.
    - &w_v 1e-2
    - &w_a 1e-2
    - &w_f 0.006 #1e-3
    - &w_sole_rot 20.
    - &w_ball_xy 10.
    - &w_postural_roll 1.

final_base_x:
  type: Cartesian
  distal_link: base_link
  indices: [0, 1]
  nodes: ${[N]}
  weight: *w_base_x

final_base_y:
  type: Cartesian
  distal_link: base_link
  indices: [0, 1]
  nodes: ${[N]}
  weight: *w_base_y

com_height:
  type: Cartesian
  distal_link: base_link
  indices: [2]
  nodes: all
  weight: *w_com

base_orientation:
  type: Cartesian
  distal_link: DWYTorso
  indices: [3, 4, 5]
#  indices: [3, 4]
  nodes: all
  weight: *w_base_ori

rot_l_sole:
  type: Cartesian
  distal_link: l_sole
  indices: [3, 4, 5]
  nodes: all
  cartesian_type: velocity
  weight: *w_sole_rot

rot_r_sole:
  type: Cartesian
  distal_link: r_sole
  indices: [3, 4, 5]
  nodes: all
  cartesian_type: velocity
  weight: *w_sole_rot

# ===============================

#interaction_l_foot:
#  type: Wrench
#  frame: l_sole
#  dimensions: [0.2, 0.1]
#  fn_min: 10.0
#  enable_cop: false
interaction_l_foot:
  type: VertexForce
  frame: l_sole
  fn_min: 10.0
  friction_coeff: 0.5
  enable_fc: false
  vertex_frames:
    - l_foot_lower_left_link
    - l_foot_upper_left_link
    - l_foot_lower_right_link
    - l_foot_upper_right_link

zero_velocity_l_foot:
  type: Cartesian
  distal_link: l_sole
  indices: [0, 1, 2]
  cartesian_type: velocity

#interaction_r_foot:
#  type: Wrench
#  frame: r_sole
#  dimensions: [0.2, 0.1]
#  fn_min: 10.0
#  enable_cop: false

interaction_r_foot:
  type: VertexForce
  frame: r_sole
  fn_min: 10.0
  friction_coeff: 0.5
  enable_fc: false
  vertex_frames:
    - r_foot_lower_left_link
    - r_foot_upper_left_link
    - r_foot_lower_right_link
    - r_foot_upper_right_link

zero_velocity_r_foot:
  type: Cartesian
  distal_link: r_sole
  indices: [0, 1, 2]
  cartesian_type: velocity
# ==================================

foot_contact_l_sole:
  type: Contact
  subtask: [interaction_l_foot, zero_velocity_l_foot]

foot_contact_r_sole:
  type: Contact
  subtask: [interaction_r_foot, zero_velocity_r_foot]

joint_posture_legs:
  type: Postural
  weight: *w_postural
  indices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
  nodes: all

joint_posture_upper_body:
  type: Postural
  weight: *w_postural_ub
  indices: [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]
  nodes: all

# todo: wrong, as the order COUNTS. If I add the contacts after the joint regularization, they wont get considered.
joint_regularization:
  type: Regularization
  nodes: all
  weight:
    velocity: *w_v
    acceleration: *w_a # 0.01
    force: *w_f

foot_z_l_sole:
  type: Cartesian
  distal_link: l_sole
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z

foot_z_r_sole:
  type: Cartesian
  distal_link: r_sole
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z

#foot_xy_l_sole:
#  type: Cartesian
#  distal_link: l_sole
#  indices: [0, 1]
#  cartesian_type: position

#foot_xy_r_sole:
#  type: Cartesian
#  distal_link: r_sole
#  indices: [0, 1]
#  cartesian_type: position
